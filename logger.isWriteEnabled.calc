/**
 * =====================================
 * logger.isWriteEnabled ( theLogLevel )
 *
 * RETURNS:
 *      (boolean) True if logs of the specified level should be saved
 *
 * PARAMETERS:
 *      theLogLevel = (numeric) 0 thru [n]
 *
 * NOTES:
 *      Any necessary filtering logic can be used in this script. The most
 *      efficient method is to hard-code a number into this calculation.
 *
 *      $logLevelToWriteOffset and $$LOGLEVELTOWRITEOFFSET allow a developer
 *      to increase the ~logLevelToWrite by setting one or both of these
 *      values. This is useful when debugging on a production file as it
 *      allows you to keep the default ~logLevelToWrite value for most
 *      users/scripts and only increase the verbosity of logging when
 *      necessary.
 *      Local and global variables are included to help manage scope. A
 *      local variable would not be very effective at increasing verbosity
 *      for an entire session; on the other hand, a local variable is
 *      ideal for increasing verbosity for a single script (without
 *      increasing for sub-scripts).
 *      If using the LogData custom function, it is recommended to modify
 *      it to add these two variables to the log, if they are not empty.
 *
 * HISTORY:
 *      MODIFIED on 2017-02-20 Cristos Lianides-Chin cristos@anchorbuoysoftware.com
 *          - bug fix: allow LogLevel overrides in addition to offsets
 *      MODIFIED on 2015-JUN-02 Daniel Smith dansmith65@gmail.com
 *          - bug fix: allow theLogLevel to be less than or equal to ~logLevelToWrite
 *      CREATED on 2014-FEB-05 Daniel Smith dansmith65@gmail.com
 *
 * LINK:
 *      https://github.com/dansmith65/FileMaker-Logger
 * =====================================
 */

Let ( 
[	~logLevelDefault = /** This can be a constant or a stored value (e.g., a global field in a Prefs table). **/
		LogLevel5Trace

;	~logLevelOverride = /** Uses the first non-NULL value from this list. Local overrides should supersede global overrides. **/
		GetValue 
		( 	List 
			(	GetAsNumber ( #Get ( $~script.logSettings ; "logLevelOverride" ) )
			;	$~script.logLevelOverride
			;	$$logger__LogLevelOverride
			;	$$LOGLEVELTOWRITEOVERRIDE
			) 
		;	1 
		)

;	~logLevelOffset = /** All offsets are cumulative -- so if both Global and Local offsets are > 0, use their sum as the offset. **/
		$logLevelToWriteOffset
		+ $~script.logLevelOffset
        + $$LOGLEVELTOWRITEOFFSET
        + GetAsNumber ( #Get ( $~script.logSettings ; "logLevelOffset" ) )
    
;	~logLevelToWrite = /** if the log level is less than or equal to this value, writing is enabled **/
	Case 
    (	IsEmpty ( ~logLevelOverride )	
    ;		~logLevelDefault + ~logLevelOffset
    /** ELSE **/
    ;	~logLevelOverride
    )
] 
;	theLogLevel â‰¤ ~logLevelToWrite
)