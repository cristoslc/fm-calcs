/*******************************************************************************
 * ForEach ( valueList ; expression )
 * ForEach repeatedly applies a calculation to each value in a ¶-delimited list.
 * For each value in valueList, evaluates expression, substituting the value for
 * each "~v" in expression. Expressions may also reference the value index (line
 * number) being evaluated with "~n". This is analogous to Map functionality in
 * functional programming languages.
 *
 * @example
 *	ForEach (
 *		List ( "1 One" ; "2 Two" ; "3 Three"  ) ;
 *		"Left ( ~v ; 1 ) + ~n"
 *	)	// = "2¶4¶6"
 *
 * @parameter valueList: A ¶-delimited list of inputs to expression
 * @parameter expression: A calculation to evaluate
 *
 * @return A ¶-delimited list of the results of evaluating expression on
 * valueList
 *
 * @history 2011-11-11 - Jeremy Bante <http://scr.im/fugue> - Created
 * @history 2011-12-23 - Jeremy Bante <http://scr.im/fugue> - include a value
 * number in calculations.
 * @history 2012-01-10 - Jeremy Bante <http://scr.im/fugue> - combine recursive
 * and non-recursive versions of the function, partly inspired by the CustomList
 * function by Agnès Barouh.
 *
 * @see http://en.wikipedia.org/wiki/Map_(higher-order_function)
 ******************************************************************************/

Case (
	/* Step 0, set-up */
	not $~fe.step ;
		Let ( [
			$~fe.valueCount = ValueCount ( valueList ) ;
			$~fe.evaluateLimit =
				If ( Left ( Get ( ApplicationVersion ) ; 2 ) = "Go" ;
					420 ;
					/* Else */ 2600
				) ;

			// build text of calculation to wrap around each value
			_start = "Let ( [ $~fe.n = $~fe.n + 1 ; ~n = $~fe.n ; ~v = \"" ;
			_end =
				"\" ]; "
				& Substitute ( expression ; ¶ ; "" )
				& " ) & \¶ &" ;

			$~fe.step = 1
		] ;
			ForEach (
				"" ;
				_start	// wrap text of calculation around each value
				& Substitute ( valueList ;
					[ "\\" ; "\\\\" ];	// Quote() each value manually
					[ "\"" ; "\\\"" ] ;
					[ "\¶" ; "\\\¶" ] ;
					[ ¶ ; _end & ¶ & _start ]
				)
				& _end
			)
		) ;

	/* Step 1, evaluate calculation in chunks */
	$~fe.step = 1 ;
		Let ( [
			$~fe.i = $~fe.i + 1 ;
			_result =
				MiddleValues (
					expression ;
					( $~fe.i - 1 ) * $~fe.evaluateLimit + 1 ;
					$~fe.evaluateLimit
				) ;
			_result = Evaluate ( _result & "\"\"" ) ;
			$~fe.resultList = $~fe.resultList & _result ;

			$~fe.step =	// advance if there are no more chunks to evaluate
				If ( $~fe.i * $~fe.evaluateLimit < $~fe.valueCount ;
					$~fe.step ;
					/* Else */ $~fe.step + 1
				)
		] ;
			ForEach ( "" ; expression )
		) ;

	/* Step 2, clean-up and return result */
	$~fe.step = 2 ;
		Let ( [
			_result =
				Substitute ( $~fe.resultList & "<|<|<END>|>|>" ;
					[ "¶<|<|<END>|>|>" ; "" ] ;
					[ "<|<|<END>|>|>" ; "" ]
				) ;

			// purge variables
			$~fe.i = "" ;
			$~fe.n = "" ;
			$~fe.resultList = "" ;
			$~fe.step = "" ;
			$~fe.valueCount = ""
		] ;
			_result
		)
)