/**
# x.ThrowException ( exCode ; exMessage ; optional_subscriptException )
 - Creates a serialized dictionary and sets the local variables for an Exception.
 - If using Single-Pass Loop architecture, `x.ThrowExceptionIf` is more concise and is generally recommended.
 - If you are just rethrowing a subscriptException, then `x.subscriptException.rethrow` is generally recommended,
 	unless you specifically need to modify the Exception code or message.

# PARAMETERS
## exCode (number)
 - The code number to include in the Exception.
## exMessage (text)
 - The message to include in the Exception.
## optional_subscriptException (text, optional)
 - If rethrowing a subscript Exception, include this parameter to capture additional 
 	data from the original Exception source.

# USAGE
```
If [ Get ( LastError ) ]
	Set Variable [ ~ ; Value: x.ThrowException ( 2000 ; "Unable to navigate to the correct layout. FileMaker error: " & Get ( LastError ) & "." ) ]
End If
```

or

```
Loop
	Perform Script [ "Send Invoice to Customer" ]
	If [ x.subscriptException.exists ]
		Set Variable [ ~ ; Value: x.ThrowException ( 3000 ; "There was a problem sending the Customer's Invoice." ; x.subscriptException ) ]
		Exit Loop If [True]
	End If

	Exit Loop If [ True // Exit single-pass loop. ]
End Loop
 
# REQUIRES
 - `#()`
 - `#GetNameList()`
 - x.thrownException
 - `x.localExceptions.add()`
 - `x.localExceptions.increment`

 
# CHANGELOG
## v1.2 2017-03-31
 - Modified by [Cristos Lianides-Chin](mailto:cristos@anchorbuoysoftware.com).
 - Added new functions for collectiong Exceptions (all `x.localExceptions` CFs ).
## v1.1 2017-03-10
 - Modified by [Cristos Lianides-Chin](mailto:cristos@anchorbuoysoftware.com).
 - Added more variants of `scriptSection` local variable detection.
## v1.0 Oct 12, 2016
 - Created by [Cristos Lianides-Chin](mailto:cristos@anchorbuoysoftware.com).

**/

Let ([
	~code = exCode
;	~message = exMessage
;	~lastException = optional_subscriptException
;	~lastExceptionStack = #get ( ~lastException ; "scriptStack" ) 
;	~lastExceptionStack = Case
	(	not IsEmpty ( ~lastExceptionStack )
		and not ( Left ( ~lastExceptionStack ; 1 ) = "?" )
	;		~lastExceptionStack
	)

;	~listLastExceptionKeys = #GetNameList ( ~lastException )
;	~isLastExceptionHasRootException = GetAsBoolean ( Position ( ¶ & ~listLastExceptionKeys & ¶ ; ¶ & "rootException" & ¶ ; 0 ; 1 ) )
;	~rootException = 
	Case ( 
		~isLastExceptionHasRootException ; #get ( ~lastException ; "rootException" ) 
	;	~lastException
	)

;	~scriptStack = List 
	( 	"[" & Get ( FileName ) & "] " & Get ( ScriptName ) 
	; 	~lastExceptionStack
	)


;	$x.thrownException = 
		# ( "code" ; ~code )
	& 	# ( "message" ; ~message )
	& 	# 
		( 	"scriptSection" 
		; 	List ( $~script.section ; $~scriptSection ; $scriptSection ) /** Accept multiple variants of local variable, for backwards-compatibility. **/
		)
	& 	# ( "scriptStack" ; ~scriptStack )
	& 	Case 
		(	IsEmpty ( ~rootException )
		;		# ( "scriptParameter" ; Get ( ScriptParameter ) )
		
		/**	DEFAULT **/
		;		# ( "rootException" ;	~rootException )
		)
	& # ( "countLocalExceptions" ; x.localExceptions.increment ) /** Include number of other Exceptions that have been thrown in this scope. **/
	& # ( "localExceptions" ; x.localExceptions ) /** Include contents of other Exceptions that have been thrown in this scope, except for this one right now. **/

;	~void = x.localExceptions.add ( x.thrownException ) /** Can't add the new Exception until its been set. **/
];

	x.thrownException 
)