/**
# x.subscriptException.rethrow ( optional_Code ; optional_Message )
 - Rethrows a subscript exception as an exception in the current script.
 - If the subscript was not run (i.e., if `Perform Script` failed), also throws an Exception.
    - This function should always be run IMMEDIATELY after the `Perform Script` step, in 
        order to capture any FileMaker errors that may have been thrown.

## PARAMETERS
### optional_Code (number, optional)
 - A code to use in the ThrownException.
 - defaults to `3000`

### optional_Message (text, optional)
 - A message to include in the newly-thrown Exception. The optional message
    will prefix the `x.subscriptException.message` but not replace it.
 - defaults to `x.subscriptException.message`


## USAGE
```
# Try
Loop
    Perform Script [ "Export Customer Invoice to PDF > filePath" ; Parameter: $idCustomerInvoice ]
    Exit Loop If [ x.subscriptException.rethrow ( $null ; $null ) ]
    Set Variable [ $filePathPdfExport ; Value: #Get ( Get ( ScriptResult ) ; "filePath" ) ]

    # Do some more things with `$filePathPdfExport`.

    # Do anything else you need to in the script.

    Exit Loop If [ True // Always exit single-pass loop. ]
End Loop

# Catch
If [ x.thrownException.exists ]
    # Error-handling code goes here.
End If
```
 
## REQUIRES
 - `x.subscriptException`
 - `x.subscriptException.exists`
 - `x.ThrowExceptionIf()`
 
## CHANGELOG
### v1.1 2017-04-20
 - Modified by [Cristos Lianides-Chin](mailto:cristos@anchorbuoysoftware.com).
 - Checks for FileMaker errors also, in case the Script failed to execute.

### v1.0 Oct 4, 2016
 - Created by [Cristos Lianides-Chin](mailto:cristos@anchorbuoysoftware.com).

**/

Let (
[   ~message = optional_Message
;   ~code = optional_Code

;   ~fmError = Get ( LastError )

;   ~isThrowException = 
        ( x.subscriptException.exists )
        or ( ~fmError > 0 )

;   ~subscriptException = x.subscriptException

;   ~exMessage = Case 
    (   ~fmError > 0
    ;       "Unable to Perform Script. FileMaker Error: " & ~fmError

    ;   IsEmpty ( ~message )
    ;       x.subscriptException.message

    /** DEFAULT **/
    ;       ~message & " (" & x.subscriptException.message & ")"
    )

;   ~exCode = Case
    (   IsEmpty ( ~code )
    ;       3000
    /** DEFAULT **/
    ;       ~code
    )
]
;   x.ThrowExceptionIf ( ~isThrowException ; ~exMessage ; ~exCode ; ~subscriptException )
)